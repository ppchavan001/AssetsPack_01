// <- is a comment
# <- is also a comment

# Define sections like [name]

# the entire string from '[' to ']' will be considered as a section key including any special characters like ",", "~", "#", etc.

# [ConsoleCommands], [ConsoleCommands ], [ ConsoleCommands], [Console Commands],  [ ConsoleCommands ]  will all be considered as same sections 

# all  lines can have space in the begining and at the end

####################################################################################################################################################################################
####################################################################################################################################################################################

# If a key/ value contains multiple words, avoid spaces in between them
# ex. In [InputAxisMappings] "Move  Test" will sometimes cause issues if "MoveTest" is already present as a  
# [InputAxisMappings] in the project.


####################################################################################################################################################################################
####################################################################################################################################################################################

[ConsoleCommands] 
#slomo 0.1
#DisableAllScreenMessages
EnableAllScreenMessages


####################################################################################################################################################################################
####################################################################################################################################################################################

[InputActionMappings]
InteractionPickup = LeftMouseButton , nDisplayButton0
#InteractionPickup = RightMouseButton , nDisplayButton0


####################################################################################################################################################################################
####################################################################################################################################################################################


[InputAxisMappings]
#Move  Test= D : 1.0 , A : -1.0, GamepadLeftThumbstickXAxis :  1.0, NDisplayButton1 :  1, NDisplayButton2 : -1.0 
Move  Test= G : 1.0 , H : -1.0, GamepadLeftThumbstickXAxis :  1.0, NDisplayButton1 :  1, NDisplayButton2 : -1.0 



####################################################################################################################################################################################
####################################################################################################################################################################################


[variables]   
# variables are divided based on the '=' character
# left of '=' is considered as the key for identification
# right of '=' is the value of the variable

# Tagged object support can be enabled at any time in the variables section  
bEnableSupportForTaggedObjects = True


# once the tag is successfully set, 
# variables after this tag will be updated on the respective object
# until tag is modified
TargetObjectTag = Build_Item

ActorDeltaZ = 25
TestString = 
"
Wow,
What a string!
!
"



# FName, if tag is empty or invalid, data loader will be the target object
TargetObjectTag = 


# float
t1=54.2

# boolean
t2 =  true  


# will be converted to UInt8 with range 0 - 255
# 2000 will be 2000 % 256 = 208
# binary = 1101 0000
byteTest = 2000

# converted to Uint8 same as byte
# does not validate result
# if val is higher then the  valid range of the enum (uint8),
# it will store "invalid" result in the enum variable
#
# ex.
# enum boolEnum {false, True}
# in this case 0(false) and 1(True) would be valid values and every other val in Uint8 range is a invalid value 
#
enumTest= 4

# array of float
t4 = 6, 2, -6.7, 724, , 35.420, -7.674, 75.35, #12 , 15 is a comment and will be ignored, t4.len == 9 since there's a "," at the end
#                    ^
# Empty values will be considered as 0


# int
t5 = -1452  


# strings
# only strings have support for multiline processing
# every other variable type needs to start and end in the same line
s1 = 
"With 
🧡" 

s2 = "In UE4 version 4.26.
Tested with 4.27 and UE5.
 --- 😁🤦‍♀️🤷‍♀️😅 --- 
 "
 
s1 = 
"Developed by @ppchavan001"

s3 = "> ? < 
{ } ! @ # % & 
# This is not a comment since its surrounded 
// by quotation marks
!!! * (     
    ) ^ $ @ _ + ~    |"



##################
# Structs
#   Can specify values with keys or CSV in order
##################

# Color
#   Keys in order : R,  G,   B,  A  on 0-255 Scale
#   keys that are not present for structs will be = default value (255)
t3 = G:0, B: 0
# is equal to:
# t3 = 255 , 0, 0, 255

# transform 
#   Keys in order : LocX, LocY, LocZ, RotX, RotY, RotZ, ScaleX, ScaleY, ScaleZ, RotW
#   keys that are not present for structs will be = default value
#   Default Rotation = Default Location = 0
#   Default Scale = 1 
t6 = RotX : -12.4 , LocX: 400, LocZ: 1000 , ScaleY : -54, RotY: 56, RotZ: -100,   ScaleX: 12.2, ScaleZ: 7  

#vector
# Keys in order : LocX, LocY, LocZ
# default value (0)
t7 =  LocZ: 125, LocY: 778
# is equal to:
# t7 = 0, 778, 125

#rotator
#   Keys in order : RotX, RotY, RotZ, RotW
#   keys that are not present for structs will be = default value (0)
t8 = RotX : -75, RotY: 76, RotZ: -650

####################################################################################################################################################################################
####################################################################################################################################################################################


